{"0": {
    "doc": "Configuration",
    "title": "Data App - Configuration",
    "content": "The IDS Data Apps can be configured for their use on a Connector, if required. Configuration can be used to set special application parameters or runtime configurations for an app. When configuring a Data App, a distinction can be made between two points in time of the configuration. Either apps can already be configured at deployment time with a static configuration file, or apps can alternatively be configured at runtime. Which of the two variants of the configuration are used depends on the parameter to be set. All parameters for starting an app are essentially set using a static configuration. An example of such parameters are volume or file bindings or port mappings. With dynamic configuration, all parameters can be set that have an influence on the execution of an app. These can be method parameters, for example, which can be changed dynamically. ",
    "url": "http://localhost:4000/IDS-AppStore/configuration#data-app---configuration",
    "relUrl": "/configuration#data-app---configuration"
  },"1": {
    "doc": "Configuration",
    "title": " Static Configuration (deloyment) ",
    "content": "If an app is configured statically, this is done at deployment time. Typically, a configuration file is loaded into the app container or the container is preconfigured with special arguments before starting it up. The static configuration can also be made by the configuration manager when deploying an app on a connector. The configurations set at deploy time are usually not changed during app execution. ",
    "url": "http://localhost:4000/IDS-AppStore/configuration#-static-configuration-deloyment-",
    "relUrl": "/configuration#-static-configuration-deloyment-"
  },"2": {
    "doc": "Configuration",
    "title": " Dynamic Configuration (runtime) ",
    "content": "For an app to support dynamic configuration, a config endpoint must be implemented to provide the configuration capability. Configuration parameters that are addressed to the app during runtime via a provided config endpoint behave differently. These configuration parameters can be changed at any time by calling the config endpoint as soon as the app has been started. ",
    "url": "http://localhost:4000/IDS-AppStore/configuration#-dynamic-configuration-runtime-",
    "relUrl": "/configuration#-dynamic-configuration-runtime-"
  },"3": {
    "doc": "Configuration",
    "title": "Configuration",
    "content": " ",
    "url": "http://localhost:4000/IDS-AppStore/configuration",
    "relUrl": "/configuration"
  },"4": {
    "doc": "Data Endpoints",
    "title": "Data Endpoints",
    "content": "The endpoints for exchanging data between apps and between apps and connectors are divided into two categories. In each case, consuming data or delivering data is considered. In principle, there is a data input endpoint for consuming data, which can be used to transport data to an app, and a data output endpoint for making data available from an app. In order to identify more quickly whether data endpoints only communicate internally, especially within a connector environment, or whether communication is established with an external component, the data endpoints are separated once again. | Input | Input_External | Output | Output_External | . ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/data-endpoints",
    "relUrl": "/endpoints/data-endpoints"
  },"5": {
    "doc": "Data Endpoints",
    "title": " Input ",
    "content": "The input endpoint is mandatory for almost all app types that work with data or data streams. The input endpoint is used to describe the consumption of data or the data flow between data apps and data apps and a connector. In summary, the data input endpoint describes an interface for all app types at which data can be transported to an app within the conncetors environment. ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/data-endpoints#-input-",
    "relUrl": "/endpoints/data-endpoints#-input-"
  },"6": {
    "doc": "Data Endpoints",
    "title": " Input External ",
    "content": "If an input endpoint is used to connect external data sources or data streams outside the actual connector environment, the External input endpoint can be used to make it clear in the metadata description that a connection is established across the boundaries of the connector at this endpoint. This special form of the input endpoint is especially relevant for system adapter apps (data sink) that establish a connection to an external data sink and enable the storage of data in external systems. ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/data-endpoints#-input-external-",
    "relUrl": "/endpoints/data-endpoints#-input-external-"
  },"7": {
    "doc": "Data Endpoints",
    "title": " Output ",
    "content": "The output endpoint is also mandatory for almost all app types that transfer data or data streams to other data apps or connectors. The Output Endpoint is used to describe the provisioning of (processed) data or data flows between Data Apps or Data Apps and a Connector. In summary, for all app types, the data output endpoint describes an interface where data can be consumed within the connector environment by other apps or the connector itself. ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/data-endpoints#-output-",
    "relUrl": "/endpoints/data-endpoints#-output-"
  },"8": {
    "doc": "Data Endpoints",
    "title": " Output External ",
    "content": "In addition to the data output endpoint already described for internal communication, there is also an output external endpoint. With this subcategory, it can already be specified during the creation of the metadata description that communication beyond the boundaries of the connector is created at this endpoint. This special form of output endpoint is primarily relevant for system adapter apps (data source) that establish a connection to an external data source and enable the reading of data in external systems. ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/data-endpoints#-output-external-",
    "relUrl": "/endpoints/data-endpoints#-output-external-"
  },"9": {
    "doc": "Endpoints",
    "title": "Data App - Endpoints",
    "content": "In this document, the different endpoint types of an IDS Data App are described in more detail regarding their meaning and function. ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints#data-app---endpoints",
    "relUrl": "/endpoints#data-app---endpoints"
  },"10": {
    "doc": "Endpoints",
    "title": "Endpoints",
    "content": "Depending on which app type is implemented, different endpoints must be implemented. The following table gives an overview of the different endpoint types available. | Type | Category | Multiplicity |:——————————|:————–|:————–| Input | dataflow | multiple | Output | dataflow | multiple | Input Extern | dataflow | multiple | Output Extern | dataflow | multiple | Config | management | single | Status | management | single | Usage | usage control | single | — . ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints",
    "relUrl": "/endpoints"
  },"11": {
    "doc": "General",
    "title": "Data App - General",
    "content": " ",
    "url": "http://localhost:4000/IDS-AppStore/general#data-app---general",
    "relUrl": "/general#data-app---general"
  },"12": {
    "doc": "General",
    "title": "General",
    "content": "What is an IDS App? How is it characterized? An IDS App is a re-usable asset. It can be downloaded from a central IDS App Store and can be deployed and monitored by an IDS Connector. So that apps can be operated and executed in a secure environment, they must be made available as virtualized containers. In principle, a distinction can be made between two different categories of data apps. The apps that fall under the category of system adapters have the task of connecting all types of data sources or data sinks and making them available to the underlying connector. This includes, for example, connections to databases, web services or Big Data systems. Furthermore, system adapters can be used to transform data models from connected data sources into a standardized format. In addition, system adapters can be used to enrich connected data with additional metadata. Unlike system adapters, the category of smart data apps includes all applications that manipulate the data flow within a connector in some way. The main tasks of a smart data app include processing or transforming data. Examples include applications for data quality assurance or machine learning. The data that a smart data app processes and makes available again is usually already enriched with metadata. IDS Data Apps are seen in the International Data Space as independent, functional and re-usable assets that can be deployed, executed and operated on a connector and its underlying data. The primary goal of a data app is to process or provide data and data streams. This allows to extend the connector’s functionality by adding additional data sources / sinks and data processing capabilities. IDS Data Apps can be distributed over the IDS Appstore to install them on the connector. In general the apps are packaged and distributed in a virtualized container to meet the requirements of a secure execution environment. ",
    "url": "http://localhost:4000/IDS-AppStore/general",
    "relUrl": "/general"
  },"13": {
    "doc": "General",
    "title": "Container Format",
    "content": "As mentioned earlier, apps are deployed and distributed in a virtualized container. The containers used should follow the OCI specification for building their images. The use of OCI compliant containers and runtime environments is not tied to a specific vendor. Due to the large operating system coverage and the open ecosystem, a high portability and interoperability between already existing connector implementations can be achieved. Due to the diversity of existing connectors, app containers are described according to the OCI standard (Open Container Initiative). In addition to support for a large number of operating systems, this also prevents independence from commercial providers and binding to a specific provider. Especially the offer of different runtime environments following the OCI standard enables a high degree of portability. Thus, an app can be run on a virtualized server as well as in the care of the large cloud platforms without any adaptations. ",
    "url": "http://localhost:4000/IDS-AppStore/general#container-format",
    "relUrl": "/general#container-format"
  },"14": {
    "doc": "General",
    "title": "Management and Orchestration",
    "content": "Within the IDS Connector, the underlying data flow is managed and orchestrated via middleware (e.g., Camel) by creating and defining routes for the different data. So each Connector is in control of where and how a data flow is defined within its boundaries. IDS Data Apps are also meant to work on the connectors data flow and therefore the can be integrated in the routes as well. It is possible to use more than one app at a time within a defined data route. The apps are specified in such a way they can be connected to each other using their input and ouput data endpoints to work on a data flow within a route. If several apps are connected to each other, we can speak of a processing chain to fulfill a specific purpose. The steps necessary for creating and operating a route with or without IDS Data Apps included are taken over by the connector (Configuration Manager) itself. Therefore IDS Data Apps are a part of the data routes to extend the connectors and the middlewares capabilities to connect data sources / data sinks or to process data. ",
    "url": "http://localhost:4000/IDS-AppStore/general#management-and-orchestration",
    "relUrl": "/general#management-and-orchestration"
  },"15": {
    "doc": "General",
    "title": "App Orchestration",
    "content": "Within the Connector, the application of several apps on one date should be made possible. Accordingly, the apps are designed in such a way that they can be connected to each other using their input and output interfaces. If several apps are connected to each other, we can speak of a processing chain. The steps necessary for creating and operating a processing chain are taken over by the connector itself. This means, among other things, that the control of the data flow between two or more apps is managed by the connector via message flows (e.g., Camel routes) to be defined. In order to use the execution of several apps on one date within a Connector environment, the apps are designed in such a way that you can join apps together to form processing chains. Orchestration between apps can be controlled and configured through the Connector using message flows. ",
    "url": "http://localhost:4000/IDS-AppStore/general#app-orchestration",
    "relUrl": "/general#app-orchestration"
  },"16": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": "Contact • Contribute • Docs • Issues • License . Get an example setup running without diving into the code. ",
    "url": "http://localhost:4000/IDS-AppStore/getting-started",
    "relUrl": "/getting-started"
  },"17": {
    "doc": "Getting Started",
    "title": "Quick Start",
    "content": "If you want to build and run locally, ensure that at least Java 11 is installed. Then, follow these steps: . | Clone the repository: … | Execute cd IDS-AppStore and ./mvnw clean package. | Navigate to /target and run java -jar ids-appstore-{VERSION}.jar. | If everything worked fine, the application is available at https://localhost:8080/. The API can be accessed at https://localhost:8080/api. The Swagger UI can be found at https://localhost:8080/api/docs. | . ",
    "url": "http://localhost:4000/IDS-AppStore/getting-started#quick-start",
    "relUrl": "/getting-started#quick-start"
  },"18": {
    "doc": "Getting Started",
    "title": "Contributing",
    "content": "You are very welcome to contribute to this project when you find a bug, want to suggest an improvement, or have an idea for a useful feature. Please find a set of guidelines at the CONTRIBUTING.md and the CODE_OF_CONDUCT.md. ",
    "url": "http://localhost:4000/IDS-AppStore/getting-started#contributing",
    "relUrl": "/getting-started#contributing"
  },"19": {
    "doc": "Getting Started",
    "title": "Developers",
    "content": "This is an ongoing project of the Fraunhofer FIT, based on the open source project Dataspace Connector - starting at version 6.1.0. The core development is driven by . | Dominic Reuter, Fraunhofer FIT, lead developer | . with significant contributions, comments, and support by (in alphabetical order): . | … | . ",
    "url": "http://localhost:4000/IDS-AppStore/getting-started#developers",
    "relUrl": "/getting-started#developers"
  },"20": {
    "doc": "Getting Started",
    "title": "License",
    "content": "Copyright © 2021 Fraunhofer FIT. This project is licensed under the Apache License 2.0 - see the LICENSE for details. ",
    "url": "http://localhost:4000/IDS-AppStore/getting-started#license",
    "relUrl": "/getting-started#license"
  },"21": {
    "doc": "Home",
    "title": "Manual and Documentation",
    "content": "This documentation provides a rough overview of the IDS App Store. It facilitates the use of the IDS App Store and serves as a starting point for contributing to its development. Get started now View it on GitHub . The IDS App Store is an ongoing open source project on GitHub, developed at Fraunhofer FIT. It is supported and promoted by the International Data Spaces Association (IDSA). … . ",
    "url": "http://localhost:4000/IDS-AppStore/#manual-and-documentation",
    "relUrl": "/#manual-and-documentation"
  },"22": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/IDS-AppStore/",
    "relUrl": "/"
  },"23": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": "The following section provides … . The International Data Spaces App Store is a secure platform for the distribution of data apps. Data apps can be used to process or transform data before or after the actual data exchange. Data apps are applications that can be deployed inside the Connector, the core technical component required for a participant to join the International Data Spaces. Data apps facilitate data processing workflows. To be accessed and used, each data app plus corresponding metadata information must be published in the App Store. The App Store is responsible for managing information about data apps. Therefore, the App Store should provide interfaces for publishing and retrieving Data Apps and their corresponding metadata. For each data app that was successfully certified, the corresponding metadata is stored in the App Store. Via a search interface, suitable data apps for one’s own use can be identfied. The IDS App Store offers various search options (e.g., by functional or non-functional properties, pricing model, certification status, community ratings, etc.). Suitable Data Apps can be requested. An IDS App Store further supports the registration of available data apps. Therefore, an App Store supports operations for registering, publishing, maintaining, and querying data apps, as well as operations for making a data app available to a Connector. These basic operations can be complemented by additional services such as billing or support services. ",
    "url": "http://localhost:4000/IDS-AppStore/introduction",
    "relUrl": "/introduction"
  },"24": {
    "doc": "Management Endpoints",
    "title": "Management Endpoints",
    "content": " ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/management-endpoints",
    "relUrl": "/endpoints/management-endpoints"
  },"25": {
    "doc": "Management Endpoints",
    "title": " Config ",
    "content": "The configuration endpoint can be used to actively set or change configuration parameters during the runtime of an IDS Data App. The dynamic configuration method can be used to react to the behavior of the app depending on the state of the environment. A further description of the configuration options can be found in the configuration document. ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/management-endpoints#-config-",
    "relUrl": "/endpoints/management-endpoints#-config-"
  },"26": {
    "doc": "Management Endpoints",
    "title": " Status ",
    "content": "The status endpoint can but does not have to be implemented by an IDS Data App. The status endpoint can be used to retrieve status information from a data app during runtime. A minimal example of a status endpoint can be a so-called “keep-alive” or “ping” information, which can be used to implement a healtcheck of an app to check if it is currently available and running. ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/management-endpoints#-status-",
    "relUrl": "/endpoints/management-endpoints#-status-"
  },"27": {
    "doc": "Metadata Representation Endpoints",
    "title": " Endpoints - Metadata Representation (IDS-Informationmodel) ",
    "content": "Due to the free choice in the programming languages and frameworks used in the development of IDS apps, endpoints must be described very precisely in terms of the communication protocols used and the data schemas employed. It is also possible to integrate multiple protocols from one app with multiple endpoints for communication in parallel. For each communication protocol used in an app, a so-called EndpointBinding must be created in the metadata description, which, in addition to the protocol used, also represents the affiliation of the implemented endpoints to a protocol by means of endpoint references. Defined standards already exist for detailed descriptions of communication endpoints, which can be used at this point. For the description of HTTP interfaces, for example, reference can be made to an app-specific OpenApi specification; equivalently, the AsyncApi specification exists for the description of asynchronous interfaces. If, for some reason, existing formats cannot be used, it is also possible to specify a specially defined representation. Preferably, however, the use of already existing specifications is recommended at this point. An endpoint reference consists of an endpoint type that classifies the endpoint according to the categories described above. In addition, the endpoint reference addresses a section of the supplied interface description via JSON reference for a detailed and specified representation regarding port, path mapping and the used data schema of the respective endpoint. ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/metadata-representation-endpoints#-endpoints---metadata-representation-ids-informationmodel-",
    "relUrl": "/endpoints/metadata-representation-endpoints#-endpoints---metadata-representation-ids-informationmodel-"
  },"28": {
    "doc": "Metadata Representation Endpoints",
    "title": "Example Endpoint binding for an Input Endpoint:",
    "content": "# Endpoint bindings ids:endpointBinding [ a ids:EndpointBinding ; # EndpointBinding defined as a reference to an (external) specification for interface descriptions (e.g. OpenApi, AsyncApi) # Provide Endpoint Specification from an URI ids:apiSpecReference &lt;https://example.org/myOpenAPISpec.json&gt; ; # Provide Endpoint Specification embedded as raw data # Can be used as an alternative to ids:apiSpecReference property, if referencing a (external) resource is not desired or possible ids:apiSpec \"raw data of the api specification.\" ; # Define a version of the referenced specification if it changes over time ids:apiSpecVersion \"0.1\" ; # Definition of the used endpoint protocol ids:protocolType idsc:HTTP ; # EndpointReference to describe different endpoint types # Endpoints are referenced by providing a JSON-reference to a specific section of the provided specification # In addition to the specification reference the endpoint type is classified by the categories mentioned above ids:endpointReference [ a ids:EndpointReference ; ids:value \"https://example.org/myOpenAPISpec.json#/myElement\"; ids:appEndpointType idsc:INPUT_ENDPOINT ; ] ; ]; . ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/metadata-representation-endpoints#example-endpoint-binding-for-an-input-endpoint",
    "relUrl": "/endpoints/metadata-representation-endpoints#example-endpoint-binding-for-an-input-endpoint"
  },"29": {
    "doc": "Metadata Representation Endpoints",
    "title": "Metadata Representation Endpoints",
    "content": " ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/metadata-representation-endpoints",
    "relUrl": "/endpoints/metadata-representation-endpoints"
  },"30": {
    "doc": "Profiles",
    "title": "Data App - Profiles",
    "content": "There are currently 4 profiles for data apps, which will be explained in the following section. The four profiles are divided into a basic and an advanced profile, each of which is further differentiated by whether the app has an integrated usage control implementation or not. In general data apps do not need a standardized API. This just needs to be documented via the API specification in the metadata representation in a human- and machine-radable way. The basic profile is assumed as the default value for all IDS data apps. Whether an app belongs to the advanced profile, on the other hand, is determined by whether one of the functionalities explained below is implemented in the app. Up to now, the implementation of usage control in a data app and/or the integration of communication with the Connetor interface have been the decisive criteria for classification in the Advanced profile. ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/profiles#data-app---profiles",
    "relUrl": "/types-and-profiles/profiles#data-app---profiles"
  },"31": {
    "doc": "Profiles",
    "title": "Overview of Data App Profiles",
    "content": "| Type | Apps | Certification | . | Basic Profile | data app, adapter app | App Criteria | . | Basic Profile - Usage Control | data app, adapter app | App Criteria | . | Advanced Profile | control app | Connector Criteria | . | Advanced Profile - Usage Control | control app | Connector Criteria | . ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/profiles#overview-of-data-app-profiles",
    "relUrl": "/types-and-profiles/profiles#overview-of-data-app-profiles"
  },"32": {
    "doc": "Profiles",
    "title": " Basic Profile ",
    "content": "(Default Profile) . In the Basic profile, an app must implement defined endpoints, depending on its app type. These endpoints must be described with the help of the IDS information model in terms of the protocols used and the data schemas. Furthermore, a data app in the basic profile must ensure that it can be integrated into the data flow of a connector and can also work on this. In addition, an IDS Data App in the Basic profile must also be signed by the App developer before the App is loaded into the Appstore and distributed by it, in order to guarantee the origin of the Data App. If an app implements an optional usage control endpoint that serves as a policy information point (PIP) and only provides general information about the app itself and its intended use, the app is still attributed to the Basic Profile due to its passive participation in the usage control process. Summary: . | Defined endpoints depending on the app type (see: Data App - Endpoints) | Ability to integrate into the data flow of a connector and applied to it | Data App must be signed by its developer before publishing and distributing to guarantee its origin | Optional: Implementation of an usage control endpoint that acts as a policy information point (PIP) | . ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/profiles#-basic-profile-",
    "relUrl": "/types-and-profiles/profiles#-basic-profile-"
  },"33": {
    "doc": "Profiles",
    "title": " Basic Profile - Usage Control ",
    "content": "If, in addition to the requirements already established from the base profile, active components for implementing usage policies are also implemented in the interaction between a data app and a usage control framework, the app is assigned to the base profile - usage control. In order for usage policies to be actively implemented at the app level, several policy enforcement points (PEP) must be implemented in addition to a policy information point (PIP) for general app and purpose information. The implementation of the policy enforcement points is tightly integrated in the app implementation. A usage control framework specific communnication is required at this point to be able to enforce several policies at the app implementation level. More information about usage control integration can be found here Data App - Usage Control. Summary: . | Requirements from the basic profile | Integration of policy information point (PIP) for general app and purpose information | Integration of usage-control framework specific communication to enforce policies within an data app by implementing policy enforcement points (PEP) | Active participation in the usage control implementation | . ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/profiles#-basic-profile---usage-control-",
    "relUrl": "/types-and-profiles/profiles#-basic-profile---usage-control-"
  },"34": {
    "doc": "Profiles",
    "title": " Advanced Profile ",
    "content": "Data apps developed under the advanced profile are essentially subject to the conditions already listed for the basic profile. In addition, they are entitled to administrative access to the connector (core execution container) compared to the basic profile. This means that the Connector API is accessed directly from a data app at this point. This enables a data app to create data resources and contracts on a connector, among other things. The administrative access to a connector should be considered and handled in a special way in any case due to its power. Data apps with this profile are also subject to the connector criteria for certification due to the administrative access. Summary: . | Requirements from the basic profile | Adminstrative access towards a connector API (core execution container) | . In the Advanced profile, additional requirements are added to those already set out in the Basic profile. The profiles differ particularly with regard to the active integration of usage control. If a data app integrates an active part in the implementation of usage control, it is automatically assigned to the advanced profile. Further information on the integration of Policy Enforcement Points (PEP) in an app can be found in the Usage Control document Data App - Usage Control. ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/profiles#-advanced-profile-",
    "relUrl": "/types-and-profiles/profiles#-advanced-profile-"
  },"35": {
    "doc": "Profiles",
    "title": " Advanced Profile - Usage Control ",
    "content": "If, in addition to the requirements already established from the advanced profile, active components for implementing usage policies are also implemented in the interaction between a data app and a usage control framework, the app is assigned to the advanced profile - usage control. In order for usage policies to be actively implemented at the app level, several policy enforcement points (PEP) must be implemented in addition to a policy information point (PIP) for general app and purpose information. The implementation of the policy enforcement points is tightly integrated in the app implementation. A usage control framework specific communnication is required at this point to be able to enforce several policies at the app implementation level. More information about usage control integration can be found here Data App - Usage Control. Summary: . | Requirements from the advanced profile | Integration of policy information point (PIP) for general app and purpose information | Integration of usage-control framework specific communication to enforce policies within an data app by implementing policy enforcement points (PEP) | Active participation in the usage control implementation | . ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/profiles#-advanced-profile---usage-control-",
    "relUrl": "/types-and-profiles/profiles#-advanced-profile---usage-control-"
  },"36": {
    "doc": "Profiles",
    "title": "Profiles",
    "content": " ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/profiles",
    "relUrl": "/types-and-profiles/profiles"
  },"37": {
    "doc": "Types and Profiles",
    "title": "Types and Profiles",
    "content": "Here, you can find a detailed description about DataApp Types and Profiles. ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles",
    "relUrl": "/types-and-profiles"
  },"38": {
    "doc": "Types",
    "title": "Data App - Types",
    "content": "There are currently three different types of apps available, which in turn must fulfill at least one of the previously mentioned profiles. In addition to the app types there is also a composition of apps, so called app bundle, which consists of multiple apps from all types. The apps in the data app and adapter app categories can fulfill both the basic and advanced profiles and their usage control equivalents. Due to the administrative access of the control app to the control plane, only a grouping into the extended profile is possible, the basic profile cannot be applied here. The different app types and their profiles must be considered from different perspectives during the certification process. ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/types#data-app---types",
    "relUrl": "/types-and-profiles/types#data-app---types"
  },"39": {
    "doc": "Types",
    "title": "Overview of Data App Types",
    "content": "| Type | Profiles | Applicability | Certification | Note | . | Data App | basic profile, basic profile - uc | generic | App Criteria | data plane | . | Adapter App | basic profile, basic profile - uc, advanced profile, advanced profile - uc | system-specific | App Criteria | data plane | . | Control App | advanced profil, advanced profile - uc | (system-), connector-specific | Connector Criteria | control plane | . | App Bundle | basic profile, basic profile - uc, advanced profile, advanced profile - uc | connector-specific | - - - - - - - - - | data plane, control plane | . In all following setups, we assume that the IDS Connector is running. As the IDS Connector deploys and monitors the IDS Apps, they are theoretically running inside the IDS Connector. That is why there is a separation between the IDS Connector’s core and the overall IDS Connector visualization. ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/types#overview-of-data-app-types",
    "relUrl": "/types-and-profiles/types#overview-of-data-app-types"
  },"40": {
    "doc": "Types",
    "title": " Data App ",
    "content": "Applicability: generic . The Data App is a re-usable application that can be downloaded and fully managed by the IDS Connector. When defining the route, matching inputs and outputs of Data App, IDS Connector, and backend system (as data source or sink) have to be put together to define a data flow on consumer or provider side. Data app example . | Start: IDS Connector endpoint or adapter app (data source) | Data App endpoint of type INPUT | Data App endpoint of type OUTPUT | End: IDS Connector endpoint or adapter app (data sink) | . Data app example . | Start: IDS Connector endpoint or adapter app (data source) | Data App1 endpoint of type INPUT | Data App1 endpoint of type OUTPUT | Data App2 endpoint of type INPUT | Data App2 endpoint of type OUTPUT | End: Different Data App for further data processing, System Adapter to store data to or external Service endpoint (Apache Camel natively supports multiple protocols to connect to various endpoints) | . The Data App can be used in various use cases and perform small processing steps or tasks, as e.g., transform, clean, analyze or anonymize data. Data Apps can be executed connector- and system-independent. Furthermore, Data Apps are independent of the context in which they are used. Data apps can also be chained together on the same data route to summarize multiple processing steps on the same data. ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/types#-data-app-",
    "relUrl": "/types-and-profiles/types#-data-app-"
  },"41": {
    "doc": "Types",
    "title": " Adapter App ",
    "content": "Naming variants: System Adapter App . Applicability: system-specific usage . The Adapter App is a re-usable application that can be downloaded and fully managed by the IDS Connector. When defining the route, matching inputs and outputs of Adapter App, IDS Connector, and data source, data sink or external service have to be put together to define a data flow on consumer or provider side. External Service example . | Start: Adapter App (External Service output) endpoint of type OUTPUT | IDS Connector endpoint | End: Adapter App (External Service input) endpoint of type INPUT | . Data Source example . | Start: Adapter App (Data Source) endpoint of type OUTPUT | End: IDS Connector endpoint | . Data Sink example . | Start: IDS Connector endpoint | End: Adapter App (Data Sink) endpoint of type INPUT | . Data Source / Data Sink with intermediate Data App example . | Start: IDS Connector endpoint or Adapter App (Data Source) endpoint of type OUTPUT | (optional) Data App1 endpoint of type INPUT | (optional) Data App1 endpoint of type OUTPUT | (optional) Data App2 endpoint of type INPUT | (optional) Data App2 endpoint of type OUTPUT | End: Adapter App (Data Sink) endpoint of type INPUT or IDS Connector endpoint | . The Adapter App can be used in various use cases and provides the IDS Connector with the functionality to connect to external services, custom data sources or custom data sinks. This is important when the routing framework is not natively able to support the provided endpoints or protocols. It can be executed connector- but not system-independent, as it only works with pre-defined systems. In general, it is not interested in the context in which it is used. System adapters following the advanced profile and implementing usage-control are able to enforce usage policies on data sources, data sinks or external services. - As generic endpoints interacting with the backend system is not sufficient for actually storing data, the app needs to be configured. - The IDS App needs a defined endpoint for output configuration. It needs to be specified where exactly to route the data into the backend system. - Possibly *n* input and *m* output endpoints with an unspecified protocol; the route definition uses one specific input endpoint to integrate the app into the data route - IDS Info Model description of app endpoints, protocol bindings, and supported usage control patterns - The IDS App gets the artifact and contract agreement id as input. For fetching the agreement, it needs to request the IDS Connector. ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/types#-adapter-app-",
    "relUrl": "/types-and-profiles/types#-adapter-app-"
  },"42": {
    "doc": "Types",
    "title": " Control App ",
    "content": "Applicability: system- and/or connector-specific usage . The Control App is a re-usable application that can be downloaded and fully managed by the IDS Connector. In contrast to Data and Adapter Apps, it does not act on the data flow, but on the administrative control flow. It offers the possibility to connect existing backend systems, which may consist of a single or a cluster of applications and services, to an IDS ecosystem using the IDS Connector. Therefore, it is a connector-specific app that requires programming against the respective API of a connector in a specific version for its implementation. The administrative capabilities can be applied to different use cases. For example, existing data sources from backend services can be enriched with metadata and subsequently registered at the IDS Connector as IDS Resources. Furthermore, administrative access to the IDS Connector of a Control App enables, for example, the integration of a deployed IAM or IDS communication with other IDS Connectors or IDS Brokers. It also enables advanced functionality on the Connector itself, so a Control App on an IDS Connector can publish resources, negotiate contracts, or configure or provision data routes with Data Apps or Adapter Apps. Control App example The Control App is connector-specific and even depends on a specific version of the connector implementation. Control Apps offer an interface for the administrative connector API that can be used by another use case-specific implementation. Such a use case shall be sketched as an example, but can vary arbitrarily according to the functional scope of the implemented interface: . | Create a resource | Publish resource to the IDS Broker as a data provider | Automatic Update of data queries as a data consumer | . ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/types#-control-app-",
    "relUrl": "/types-and-profiles/types#-control-app-"
  },"43": {
    "doc": "Types",
    "title": " App Bundle ",
    "content": "Naming variants: Service App . App bundles can be seen as a composition of apps from the Adapter App, Data App and Control App categories and their implemented profiles. With such a composition, different (already existing) apps can be put together to fulfill a certain use-case or purpose. The compilations for solving specific problems can also be shared across Connectors, a bundle can be shared with other participants in the IDS ecosystem via the central App Store. Examples . Examples of possible compositions will be shown below. These are only examples for conceptual understanding. Accordingly, the bundles are not subject to any restrictions on the composition of their components. Read data from backend system connection with preprocessing task . In this example composition a backend system is connected via a Control App for reading data and doing a data cleaning within a Data App before provisioning data over the connector itself. Data Flow: Backend-System –&gt; (Control App –&gt; Data App) –&gt; Connector . Bundle consists of: . | Control App | Data App: | . Creating a data processing pipeline with Adapter Apps and Data Apps . In this example compositon a simple data processing pipeline is bundled together from different apps. The Adapter App provides data from a data source, which is then processed in a data app (e.g. data cleaning) and then stored again by an adapter app in a data sink. Data Flow: Adapter App (source) –&gt; Data App –&gt; Adapter App (sink) . Bundle consists of: . | Adapter App (source) | Data App | Adapter App (sink) | . With the idea of bundleing apps even very complex and specific use cases can be described in different single apps without losing the idea of being partially reusable to others participants. ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/types#-app-bundle-",
    "relUrl": "/types-and-profiles/types#-app-bundle-"
  },"44": {
    "doc": "Types",
    "title": "Types",
    "content": " ",
    "url": "http://localhost:4000/IDS-AppStore/types-and-profiles/types",
    "relUrl": "/types-and-profiles/types"
  },"45": {
    "doc": "Usage Control Endpoints",
    "title": "Usage Control Endpoints",
    "content": " ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/usage-control-endpoints",
    "relUrl": "/endpoints/usage-control-endpoints"
  },"46": {
    "doc": "Usage Control Endpoints",
    "title": " Usage ",
    "content": "The usage endpoint acts as a Policy Information Point (PIP) to deliver some information about the app itself represented in a json format. The information that can be retrieved from the app at this endpoint contains general information for use with a usage control app. The following information can then be retrieved via this Policy Information Point: . | AppName: The name of the app | AppURI: The URI of the app or another identifier | AppPurpose: The general purpose of an app. | AppActions: The superclass of a policy: Usage, Distribute, Execute. | . For more information on the usage control endpoint or the usage control integration patterns take a look at the usage-control document configuration . ",
    "url": "http://localhost:4000/IDS-AppStore/endpoints/usage-control-endpoints#-usage-",
    "relUrl": "/endpoints/usage-control-endpoints#-usage-"
  },"47": {
    "doc": "Usage Control",
    "title": "IDS Data Apps and Usage Control Integration",
    "content": "The intent of this document is to provide an overview of the various options for Usage Control integration in an IDS Data App. In addition, a summary of Usage Control Policies that are relevant for an implementation of Usage Control in Data Apps will be given. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#ids-data-apps-and-usage-control-integration",
    "relUrl": "/usage-control#ids-data-apps-and-usage-control-integration"
  },"48": {
    "doc": "Usage Control",
    "title": "Overview about Usage Control Integrations",
    "content": "| Integration | Profile | Enforcement Level | . | Interceptor | Basic, Advanced | Data Route | . | Interceptor with PIP | Basic, Advanced | Data Route | . | Usage Control App (PIP /PEP) | Basic - Usage Control, Advanced - Usage Control | UC APP + IDS APP | . | In-App Usage Control Framework | Basic - Usage Control, Advanced - Usage Control | IDS APP (UCF integrated) | . ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#overview-about-usage-control-integrations",
    "relUrl": "/usage-control#overview-about-usage-control-integrations"
  },"49": {
    "doc": "Usage Control",
    "title": " Usage Control with Data Apps via Interceptor (Route Level) ",
    "content": "It is possible to enforce certain high-level usage control policies at the data transfer level of a connector. For a better overview of the policies that can be enforced at the route level, a look can be taken at the table in chapter XX. The interceptor pattern is used here, which means that communication between the connector and the data apps is affected directly. The interceptor is integrated directly into the defined data routes and thus has direct access to the exchanged data and metadata. Extend Data Flow with Usage Control Information . In order for Data Apps to be integrated into the Interceptor pattern, additional information for the implementation of policies must be provided in addition to the transmitted data. The additional information consists of: . | TargetDataUri: The URI of the artifact to be transferred. | ContractId: The ID of the contract that belongs to the transferred artifact. | AppName: The name of the app to which the message will be sent | AppUri: The URI of the app to which the message is sent. | . Integrate Additional Usage Control Information within HTTP Communication . If it is assumed that currently HTTP is the most used communication protocol for communication between data apps, this additional information can be provided using HTTP headers. The use of header fields can prevent the usage control information from being sent in an extra payload format. If the data to be transmitted is packed into the payload and the additional information is located in the header fields, normal HTTP requests can be used. The header fields must be named as mentioned in the previous chapter. Integrate Additional Usage Control Information with an Policy Information Point (PIP) . If more additional information from a data app is to be used for usage control in addition to the information from the data flow, an implementation of a policy information point in a data app becomes necessary. Such an endpoint can be declared in an app implementation with the ids:appEndpointType idsc:USAGE_ENDPOINT. The following information can then be retrieved via this Policy Information Point: . | AppName: The name of the app | AppURI: The URI of the app or another identifier | AppPurpose: The general purpose of an app. | AppActions: The superclass of a policy: Usage, Distribute, Execute. | . In this approach, the Data App provides information about itself using a Policy Information Point (ids:appEndpointType idsc:USAGE_ENDPOINT). However, since a data app only provides information at this point and does not provide any usage control implementations itself, all apps that follow this approach can be described under the Base Profile. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-usage-control-with-data-apps-via-interceptor-route-level-",
    "relUrl": "/usage-control#-usage-control-with-data-apps-via-interceptor-route-level-"
  },"50": {
    "doc": "Usage Control",
    "title": " Usage Control Awareness with Data Apps using the Usage Control App (HTTP-REST Integration) ",
    "content": "In this approach, several policy enforcement points are implemented in addition to the policy information point already described. The enforcement points are calls to the usage control app that are issued when a data app calls certain program parts or methods in order to inform the usage control app. This means that the Usage Control App can use the hooks to enforce Usage Control Policies on a much more granular level than on the pure data flow between apps or the connector. For example, if you look at the purpose “Use”, it can not only be applied to the pure use of the data itself as before, but can be separated more precisely using the hooks. This results, for example, in more finely specified actions such as Process, Display or Store. The IDS Data App must implement the interfaces of the Usage Control App and its data format to implement the hooks. This specific integration and the active sending of the hooks to the Usage Control App results in a Data App being assigned to the Advanced Profile. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-usage-control-awareness-with-data-apps-using-the-usage-control-app-http-rest-integration-",
    "relUrl": "/usage-control#-usage-control-awareness-with-data-apps-using-the-usage-control-app-http-rest-integration-"
  },"51": {
    "doc": "Usage Control",
    "title": " Usage Control Awareness with Data Apps using an Usage Control Framework (In-App Implementation)",
    "content": "The third approach to integrating usage control into data apps is to implement a standalone usage control framework in the IDS data app itself. The implementation of this approach requires the already known policy enforcement points on the part of an app and on the other side a complete usage control framework is built into the app. The integration of a complete Usage Control Framework with all its components, such as a Policy Decision Point (PDP) or a Policy Management Point (PMP) and their associated interfaces and data formats is assumed at this point. This solution offers the greatest degree of freedom in terms of the technologies used, starting with the selection of the usage control framework, the programming language and the data formats. However, in addition to the additional effort on the part of the developers, the considerable effort required for the additional management of the policies in a stand-alone system should also be considered. Due to the fact that a complete usage control framework is integrated and the policy management is completely taken over by the app at this point, all apps that follow this integration are automatically assigned to the Advanced Profile of a data app. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-usage-control-awareness-with-data-apps-using-an-usage-control-framework-in-app-implementation",
    "relUrl": "/usage-control#-usage-control-awareness-with-data-apps-using-an-usage-control-framework-in-app-implementation"
  },"52": {
    "doc": "Usage Control",
    "title": "Usage Control Policies for Data Apps",
    "content": " ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#usage-control-policies-for-data-apps",
    "relUrl": "/usage-control#usage-control-policies-for-data-apps"
  },"53": {
    "doc": "Usage Control",
    "title": " Overview of Usage Control Policies ",
    "content": "The following section will take a closer look at the Usage Control Policies relevant to IDS Data Apps and where they can be enforced. | Policy | Data Route | UC APP | IDS APP | IDS Connector | . | Allow the usage of data | X | X | X | X | . | Connector-restricted data usage | X | O | O | X | . | Application-restricted data usage | X | X | O | O | . | Interval-restricted data usage | O | X | O | O | . | Duration-restricted data usage | O | X | O | O | . | Location-restricted data usage | O | X | X | X | . | Purpose-restricted data usage | O | X | O | O | . | Event-restricted data usage | O | X | O | O | . | Use the data not more than N times | O | X | X | O | . | Allow use of data and delete it after | O | O | X | O | . | Modify data (in transit) | O | X | O | O | . | Log the data usage information | O | X | O | X | . | Notify a party or a specific group of users when the data is used | O | X | O | X | . | Attach Policy when distribute to a third-party | O | O | X | X | . | Distribute only if encrypted | X | X | X | X | . | Restrict the data usage to specific state | O | X | O | X | . ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-overview-of-usage-control-policies-",
    "relUrl": "/usage-control#-overview-of-usage-control-policies-"
  },"54": {
    "doc": "Usage Control",
    "title": " 1. Allow the usage of data ",
    "content": "This policy describes whether the general use of data is allowed or prohibited. Since the concept of use has so far only existed in very general terms at the level of a few categories, further classification is required in many use cases. The categories of use defined so far can be implemented on different levels. Some can already be implemented on data routes using the interceptor pattern, whereas others require so-called actions, which on the one hand require an implementation in the IDS Data App and on the other hand a registration with the Usage Control App. The actions can be built in a hierarchical structure to support enforcement on a higher levels as well as on a more granular level of individual actions. The enforcement of policies from this category is based on black- or whitelisting to restrict the data usage. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-1-allow-the-usage-of-data-",
    "relUrl": "/usage-control#-1-allow-the-usage-of-data-"
  },"55": {
    "doc": "Usage Control",
    "title": " 2. Connector-restricted data usage (Route restricted data usage) ",
    "content": "The data can only be processed by or transfered to an app that belongs to the same data route definition or at least is running on the same connector. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-2-connector-restricted-data-usage-route-restricted-data-usage-",
    "relUrl": "/usage-control#-2-connector-restricted-data-usage-route-restricted-data-usage-"
  },"56": {
    "doc": "Usage Control",
    "title": " 3. Application-restricted data usage ",
    "content": "The data can only be processed by or transfered to a specific app. The usage control app uses an app identifier given by an policy information endpoint to proof an app identity. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-3-application-restricted-data-usage-",
    "relUrl": "/usage-control#-3-application-restricted-data-usage-"
  },"57": {
    "doc": "Usage Control",
    "title": " 4. Interval-restricted data usage ",
    "content": "The data can only be used by Data Apps within a given intervall. The usage control app (UC APP) can be used to proof the valid intervall. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-4-interval-restricted-data-usage-",
    "relUrl": "/usage-control#-4-interval-restricted-data-usage-"
  },"58": {
    "doc": "Usage Control",
    "title": " 5. Duration-restricted data usage ",
    "content": "The data can only be used by Data Apps within a given duration. The usage control app (UC APP) can be used to proof the valid duration. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-5-duration-restricted-data-usage-",
    "relUrl": "/usage-control#-5-duration-restricted-data-usage-"
  },"59": {
    "doc": "Usage Control",
    "title": " 6. Location-restricted data usage ",
    "content": "The data can only be used by IDS Data Apps that belong to the same geolocation. The location is the same as the connector location for all apps without a graphical user interface. For data apps with a graphical user interface, you have to decide whether to use the connector location or the location of the calling interface, which can be in a different location than the hosting connector. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-6-location-restricted-data-usage-",
    "relUrl": "/usage-control#-6-location-restricted-data-usage-"
  },"60": {
    "doc": "Usage Control",
    "title": " 7. Purpose-restricted data usage ",
    "content": "The Ids Data Apps can communicate their purpose via a policy information point. Based on the purppose, the Usage Control App decides whether the data may be used or not. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-7-purpose-restricted-data-usage-",
    "relUrl": "/usage-control#-7-purpose-restricted-data-usage-"
  },"61": {
    "doc": "Usage Control",
    "title": " 8. Event-restricted data usage ",
    "content": "The data usage is allowed for the timespan of a realworld event. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-8-event-restricted-data-usage-",
    "relUrl": "/usage-control#-8-event-restricted-data-usage-"
  },"62": {
    "doc": "Usage Control",
    "title": " 9. Use the data not more than N times ",
    "content": "Data access is limited to a certain number of accesses. The accesses are counted and restricted with the help of an IDS Data App and the policy enforcement points (hooks to the UC APP) implemented in it and the Usage Control App. The actual “use” can be determined more finely by means of defined actions. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-9-use-the-data-not-more-than-n-times-",
    "relUrl": "/usage-control#-9-use-the-data-not-more-than-n-times-"
  },"63": {
    "doc": "Usage Control",
    "title": " 10. Allow use of data and delete it after ",
    "content": "This policy class describes that an IDS app is authorized to use the data, but the data must be deleted after processing or display. In particular, the time of deletion must be described in much detail. For example, deletion can take place directly after a single use/processing, after multiple processing, or after a specified period of time. A suggestion for the definition of “use” at this point would be, for example, the fulfillment of a predefined action in an IDS Data App. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-10-allow-use-of-data-and-delete-it-after-",
    "relUrl": "/usage-control#-10-allow-use-of-data-and-delete-it-after-"
  },"64": {
    "doc": "Usage Control",
    "title": " 11. Modify data (in transit) ",
    "content": "When using and processing data in one or more IDS Data Apps, data may need to be modified in some way before it can be used or processed. The modification of the data must occur during transmission before it is processed or displayed by an IDS Data App. This class of usage control policies can be used to describe the use of IDS Apps that require prior data modification in transit. In order for the data to be modified during transmission, a usage control framework is used to intercept the data and implement the required modifications for the use of the data in one or more IDS Data Apps. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-11-modify-data-in-transit-",
    "relUrl": "/usage-control#-11-modify-data-in-transit-"
  },"65": {
    "doc": "Usage Control",
    "title": " 12. Log the data usage information ",
    "content": "Data access should be logged. The logging can be realized via the usage control app. The UC APP can log locally or log to a central location, such as the IDS Clearinghouse. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-12-log-the-data-usage-information-",
    "relUrl": "/usage-control#-12-log-the-data-usage-information-"
  },"66": {
    "doc": "Usage Control",
    "title": " 13. Notify a party or a specific group of users when the data is used ",
    "content": "If someone needs to be informed whenever the data is processed by an IDS Data App this policy can be used. The usage control app will take care of the notification process. For example a data consumer can send a notification to the data provider whenever the data is processed or transfered by an IDS Data App. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-13-notify-a-party-or-a-specific-group-of-users-when-the-data-is-used-",
    "relUrl": "/usage-control#-13-notify-a-party-or-a-specific-group-of-users-when-the-data-is-used-"
  },"67": {
    "doc": "Usage Control",
    "title": " 14. Attach Policy when distribute to a third-party (Connector or route layer) ",
    "content": "If data is shared with third parties, a data provider may specify additional data usage policies to apply to third parties. Accordingly, the data consumer is obligated to forward the specified usage control policy to third parties, and only after successfull consent will the actual data be transported. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-14-attach-policy-when-distribute-to-a-third-party-connector-or-route-layer-",
    "relUrl": "/usage-control#-14-attach-policy-when-distribute-to-a-third-party-connector-or-route-layer-"
  },"68": {
    "doc": "Usage Control",
    "title": " 15. Distribute only if encrypted (App, route layer) ",
    "content": "In a common scenario, a data provider specifies a policy to grant permission to one or more data consumers to use the data. In addition, there may aslo be cases where the Data Consumer requests permission to share the data with other users or third parties. This class of policy deals exclusively with the state of the data asset in the case of exchange to third parties or further sharing. For example, one can specify a policy of this type to restrict the data consumer to share the data only if it is encrypted. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-15-distribute-only-if-encrypted-app-route-layer-",
    "relUrl": "/usage-control#-15-distribute-only-if-encrypted-app-route-layer-"
  },"69": {
    "doc": "Usage Control",
    "title": " 16. Restrict the data usage to specific state (connector) ",
    "content": "This policy class can be used to restrict the usage based on a specific state change of the environment but not on the data asset state. The environment consists of contracts regarding the exchanged data and the connector itself. In particular, when there is a state change around a paticular contract, such as when the contract is unexpectedly terminated, this policy takes effect. In addition to contracts, state changes on the part of the connector are also covered in this policy class, e.g., when the firewall state of the connector changes. ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control#-16-restrict-the-data-usage-to-specific-state-connector-",
    "relUrl": "/usage-control#-16-restrict-the-data-usage-to-specific-state-connector-"
  },"70": {
    "doc": "Usage Control",
    "title": "Usage Control",
    "content": " ",
    "url": "http://localhost:4000/IDS-AppStore/usage-control",
    "relUrl": "/usage-control"
  }
}
